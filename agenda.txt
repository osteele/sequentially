* Next
- promises and futures
- until, while, combinators a{n}0 ab*
- eventually vs. fork

* Naming
- rename -> 'frequently'?
- arg binding is inconsistent
- rename 'exactly', 'periodically'

* Examples
- more mvar examples
- pi examples

* Text
- eventually vs. fork --- change it to run()?
- mvar vs. queue

var fn = function(){return 1}.eventually();
output(fn.join()); // calls it immediately

// add error handling?
Function.fork = function() {
  var thread = setTimeout(fn, ms);
  return {
    cancel: function() {thread&&clearTimeout(thread); thread=null},
    join: function() {thread&&clearTimeout(thread); thread=null;return fn();fn=null},
  }
}

pi = Pi.Name();
